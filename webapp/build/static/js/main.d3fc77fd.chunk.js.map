{"version":3,"sources":["listuser.js","faceapireconition.js","uploadcamara.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ListUser","apiUrl","useState","List","setList","Files","setFiles","useEffect","console","log","a","axios","result","data","fetchData","map","item","index","key","onClick","get","then","res","getFiles","src","Facereconition","setResult","url","setURl","type","value","onChange","e","target","post","dataUri","name","catch","error","response","statusText","Camaraupload","username","setName","onTakePhoto","App","component","setComponet","showcomponent","className","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.d3fc77fd.chunk.js","sourcesContent":["import React, { useState,Fragment, useRef , useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nfunction ListUser() {\r\n  const apiUrl = \"https://apifacelorbrito.azurewebsites.net/api/faceapi?code=LSPc9n6WBiC33f2u9GFlvrygmfLEVcw4OJgeDVaYMPJIBig6yKv6yA==\";\r\n  const [List, setList] = useState([]);\r\n  const [Files, setFiles] = useState([]);\r\n  const [Container, setContainer] = useState('');\r\n  function getFiles (item) {\r\n    axios.get(apiUrl+'&container='+item)\r\n      .then(res => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n        setFiles(res.data)\r\n      })\r\n  }\r\n      useEffect(() => {\r\n        console.log('calling use');\r\n        const fetchData = async () => {\r\n          const result = await axios(apiUrl);\r\n          setList(result.data);\r\n          \r\n        };\r\n      \r\n        fetchData();\r\n      }, []);\r\n     \r\n      return (\r\n        <div>\r\n      <div>\r\n       {List.map((item,index)=>{\r\n              return  <div key={index}>\r\n              <button onClick={() => getFiles(item)}>{item}</button>\r\n              </div>\r\n       })}\r\n       </div>\r\n       <div>\r\n       {Files.map((item,index)=>{\r\n              return  <div key={index}>\r\n              <button >{item}</button>\r\n              <img src={item} ></img>\r\n              </div>\r\n       })}\r\n       </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default ListUser;\r\n","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nfunction Facereconition() {\r\n  const ApiUrl=\"https://apifacelorbrito.azurewebsites.net/api/faceanalyze?code=Q3923RB87m6wzE27ujCrunjk7F24ojapzKoS5DKGgEIHVzeY7OfI/g==\";\r\n  const [result, setResult] = useState('');\r\n  const [url, setURl] = useState('');\r\n  function analyzeUrl() {\r\n    axios.post(ApiUrl, { \r\n      dataUri: url,\r\n   name : '' })\r\n     .then(res => {\r\n       console.log(res);\r\n       console.log(res.data);\r\n       setResult(res.data);\r\n     }).catch(function (error) {\r\n      console.log(error.response.statusText);\r\n      setResult(error.response.statusText);\r\n });\r\n  }\r\n  return (\r\n    <div>\r\n       Url to be analyze \r\n       {result}\r\n       <input\r\n          type=\"text\"\r\n          value={url}\r\n          onChange={e => setURl(e.target.value)}/>\r\n         \r\n         <button onClick={() => analyzeUrl()}>Upload</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Facereconition;\r\n","import React, { useState,Fragment, useRef , useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Camera from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nfunction Camaraupload() {\r\n  const apiUrl = \"https://apifacelorbrito.azurewebsites.net/api/faceapi?code=LSPc9n6WBiC33f2u9GFlvrygmfLEVcw4OJgeDVaYMPJIBig6yKv6yA==\";\r\n  const [username, setName] = useState('');\r\n  \r\n    function handleTakePhoto (dataUri) {\r\n        axios.post(apiUrl, { \r\n           dataUri: dataUri,\r\n        name : username })\r\n          .then(res => {\r\n            console.log(res);\r\n            console.log(res.data);\r\n          })\r\n      }\r\n  \r\n      const handleInputChange = (e) => setName( e.currentTarget.value);\r\n      return (\r\n        <div>\r\n            <div>\r\n        <Camera\r\n          onTakePhoto = {handleTakePhoto}\r\n        />\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={e => setName(e.target.value)}/>\r\n\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Camaraupload;\r\n","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ListUser from './listuser';\r\nimport Facereconition from './faceapireconition';\r\nimport Camaraupload from './uploadcamara'\r\nfunction App() {\r\n  const [component, setComponet] = useState(2);\r\n  let showcomponent=null;\r\n\r\n  if (component===1) {\r\n    showcomponent = <Camaraupload/>;\r\n  } else if(component===2) {\r\n    showcomponent = <Facereconition/>;\r\n  } else{\r\n    showcomponent = <ListUser/>;\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Face Api Reconition\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n        </a>\r\n      </header>\r\n      <div>\r\n      <button onClick={() => setComponet(1)}>Take Picture</button>\r\n      <button onClick={() => setComponet(2)}>Reconition</button>\r\n      <button onClick={() => setComponet(3)}>List user</button>\r\n        \r\n        {showcomponent}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}